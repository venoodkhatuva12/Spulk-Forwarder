[__generate_lookup_containername]
cron_schedule = 10 0 * * *
dispatch.earliest_time = -30d
dispatch.latest_time = now
enableSched = 1
#search = `docker_container_configs` | stats first(Name) as containername by ID | outputlookup append=f createinapp=f docker_containername.csv
search = `docker_container_configs` | stats first(Name) as containername, first(Config.Labels.com.docker.swarm.node.id) as node_id, first(Config.Labels.com.docker.swarm.service.id) as serviceid, first(Config.Labels.com.docker.swarm.service.name) as servicename by containerid | outputlookup append=f createinapp=f docker_containername.csv

[__append_lookup_containername]
cron_schedule = */1 * * * *
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
#search = `docker_container_configs` | stats first(Name) as containername by ID | outputlookup append=t createinapp=f docker_containername.csv
search = `docker_container_configs` | stats first(Name) as containername, first(Config.Labels.com.docker.swarm.node.id) as node_id, first(Config.Labels.com.docker.swarm.service.id) as serviceid, first(Config.Labels.com.docker.swarm.service.name) as servicename by containerid | outputlookup append=t createinapp=f docker_containername.csv

[__generate_lookup_cluster]
cron_schedule = 10 0 * * *
dispatch.earliest_time = -30d
dispatch.latest_time = now
enableSched = 1
search = `docker_cluster_nodes` | dedup node_id | eval node_id = trim(replace(node_id, " \*", "")) | table node_id, hostname, availability, manager_status, status | outputlookup append=f createinapp=f clusternodes.csv

[__append_lookup_cluster]
cron_schedule = */1 * * * *
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
search = `docker_cluster_nodes` | dedup node_id | eval node_id = trim(replace(node_id, " \*", "")) | table node_id, hostname, availability, manager_status, status | outputlookup append=f createinapp=f clusternodes.csv

[__generate_lookup_services]
cron_schedule = */1 * * * *
dispatch.earliest_time = -5m
dispatch.latest_time = now
enableSched = 1
search = `docker_cluster_services` | dedup service_id | table service_id, service_name, service_mode, replicas | outputlookup append=f createinapp=f services.csv

[cpu_max_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername  as container_name   \
        | search container_name=$container_name$    \
        | timechart limit=20 max(cpu_percent) by container_name

[memory_max_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name   \
        | search container_name=$container_name$   \
        | timechart limit=20 max(mem_percent) by container_name


[network_input_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | eval net_input_a=split(net_input," ")   \
        | eval net_int_mb=case( mvindex(net_input_a,1)=="B",tonumber(mvindex(net_input_a,0))/1024, mvindex(net_input_a,1)=="kB",tonumber(mvindex(net_input_a,0)),    \
        mvindex(net_input_a,1)=="MB",tonumber(mvindex(net_input_a,0))*1024, mvindex(net_input_a,1)=="GB", tonumber(mvindex(net_input_a,0))*1024*1024 )   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name   \
        | search container_name=$container_name$   \
        | stats avg(net_int_mb) as net_int_mb by _time, container_name   \
        | streamstats window=1 global=f current=f first(net_int_mb) as f_net_int_mb by container_name   \
        | eval delta=net_int_mb-f_net_int_mb    \
        | eval delta=if(delta<0,0,delta)   \
        | timechart limit=20 avg(delta) by container_name


[network_output_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | eval net_output_a=split(net_output," ")   \
        |eval net_out_mb=case(mvindex(net_output_a,1)=="B",tonumber(mvindex(net_output_a,0))/1024,   \
        mvindex(net_output_a,1)=="kB",tonumber(mvindex(net_output_a,0)),   \
        mvindex(net_output_a,1)=="MB",tonumber(mvindex(net_output_a,0))*1024,   \
        mvindex(net_output_a,1)=="GB",tonumber(mvindex(net_output_a,0))*1024*1024)   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name   \
        | search container_name=$container_name$|stats avg(net_out_mb) as net_out_mb by _time, container_name  \
        |streamstats window=1 global=f current=f first(net_out_mb) as f_net_out_mb by container_name   \
        |eval delta=net_out_mb-f_net_out_mb|eval delta=if(delta<0,0,delta)  \
        |timechart limit=20 avg(delta) by container_name


[block_output_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | eval block_output_a=split(block_output," ")    \
        | eval block_out_mb=case( mvindex(block_output_a,1)=="B",tonumber(mvindex(block_output_a,0))/1024,   \
        mvindex(block_output_a,1)=="kB",tonumber(mvindex(block_output_a,0)),   \
        mvindex(block_output_a,1)=="MB",tonumber(mvindex(block_output_a,0))*1024,   \
        mvindex(block_output_a,1)=="GB",tonumber(mvindex(block_output_a,0))*1024*1024 )   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name   \
        | search container_name=$container_name$   \
        | stats avg(block_out_mb) as block_out_mb by _time, container_name   \
        | streamstats window=1 global=f current=f first(block_out_mb) as f_block_out_mb by container_name   \
        | eval delta=block_out_mb-f_block_out_mb   \
        | eval delta=if(delta<0,0,delta)   \
        | timechart limit=20 avg(delta) by container_name

[block_input_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = source=docker_stats   \
        | eval block_input_a=split(block_input," ")    \
        | eval block_int_mb=case( mvindex(block_input_a,1)=="B",tonumber(mvindex(block_input_a,0))/1024,   \
        mvindex(block_input_a,1)=="kB",tonumber(mvindex(block_input_a,0)),   \
        mvindex(block_input_a,1)=="MB", tonumber(mvindex(block_input_a,0))*1024,   \
        mvindex(block_input_a,1)=="GB",tonumber(mvindex(block_input_a,0))*1024*1024 )   \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name   \
        | search container_name="$container_name$" | stats avg(block_int_mb) as block_int_mb by _time, container_name   \
        | streamstats window=1 global=f current=f first(block_int_mb) as f_block_int_mb by container_name   \
        | eval delta=block_int_mb-f_block_int_mb   \
        | eval delta=if(delta<0,0,delta)   \
        | timechart limit=20 avg(delta) by container_name

[docker_events_by_container]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=DockerEvents NOT _raw="*top"     \
        | head 100 | eval event=mvindex(split(_raw,") "), 1)    \
        | eval container_id=substr(_raw, 32, 12)    \
        | join [search sourcetype=DockerEvents NOT _raw="*top"    \
        | head 100 | eval event=mvindex(split(_raw,") "), 1)     \
        | eval container_id=substr(_raw, 32, 12)    \
        | lookup docker_containername.csv containerid as container_id OUTPUT containername as container_name    \
        | table container_id, container_name    \
        | dedup container_id, container_name]    \
        | search container_name= $container_name$    \
        | table _time, container_name, event

[available_container_names]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = List of available container names.
search = source=docker_inspect | dedup Name | stats count by Name

[count_logs_fileinput]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = Count of logs by container name    \
search = sourcetype="container:log"   \
        | lookup docker_containername.csv containerid as host OUTPUT containername as container_name   \
        | search container_name=$container_name$   \
        | timechart count by container_name

[max_memused_percent]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = Percent of available docker host memory.
search = source=docker_stats    \
        | eval mem_usage_a=split(mem_usage," ")   \
        | eval mem_usage_gb=case( mvindex(mem_usage_a,1)=="B",tonumber(mvindex(mem_usage_a,0))/1024/1024,   \
        mvindex(mem_usage_a,1)=="kB",tonumber(mvindex(mem_usage_a,0))/1024/1024,    \
        mvindex(mem_usage_a,1)=="MB",tonumber(mvindex(mem_usage_a,0))/1024,   \
        mvindex(mem_usage_a,1)=="GB",tonumber(mvindex(mem_usage_a,0)),   \
        mvindex(mem_usage_a,1)=="KiB",tonumber(mvindex(mem_usage_a,0))*pow(2,10)/pow(1000,3),   \
        mvindex(mem_usage_a,1)=="MiB",tonumber(mvindex(mem_usage_a,0))*pow(2,20)/pow(1000,3),   \
        mvindex(mem_usage_a,1)=="GiB",tonumber(mvindex(mem_usage_a,0))*pow(2,30)/pow(1000,3),   \
        mvindex(mem_usage_a,1)=="TiB",tonumber(mvindex(mem_usage_a,0))*pow(2,40)/pow(1000,3) )   \
        | eval mem_limit_a=split(mem_limit," ")    \
        | eval mem_limit_gb=case( mvindex(mem_limit_a,1)=="B",tonumber(mvindex(mem_limit_a,0))/1024/1024,   \
        mvindex(mem_limit_a,1)=="kB",tonumber(mvindex(mem_limit_a,0))/1024/1024,     \
        mvindex(mem_limit_a,1)=="MB",tonumber(mvindex(mem_limit_a,0))/1024,    \
        mvindex(mem_limit_a,1)=="GB",tonumber(mvindex(mem_limit_a,0)),     \
        mvindex(mem_limit_a,1)=="KiB",tonumber(mvindex(mem_limit_a,0))*pow(2,10)/pow(1000,3),   \
        mvindex(mem_limit_a,1)=="MiB",tonumber(mvindex(mem_limit_a,0))*pow(2,20)/pow(1000,3),   \
        mvindex(mem_limit_a,1)=="GiB",tonumber(mvindex(mem_limit_a,0))*pow(2,30)/pow(1000,3),   \
        mvindex(mem_limit_a,1)=="TiB",tonumber(mvindex(mem_limit_a,0))*pow(2,40)/pow(1000,3) )   \
        | stats sum(mem_usage_gb) as mem_usage_gb, sum(mem_limit_gb) as mem_limit_gb by _time   \
        | eval mem_percent_used=max(mem_usage_gb)/max(mem_limit_gb)*100   \
        | stats max(mem_percent_used)

[reassembled_log_events]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype="container:log"     \
        |  transaction source maxevents=5   \
        | lookup docker_containername.csv containerid as host OUTPUT containername as container_name   \
        | search container_name=$container_name$   \
        | table _time container_name log

[docker_image_name]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=httpevent    \
        | spath output=dockerimagename path=tag   \
        | dedup dockerimagename   \
        | table dockerimagename

[http_log_by_tag]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=httpevent      \
    | spath output=tag path=tag     \
    | search tag=$image_id$     \
    | transaction tag maxevents=5     \
    | table _time tag line

#
# Searches for UCP logs
#

[ucp_audit]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp process::/bin/controller

[ucp_errors]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp process::/bin/controller level=error

[ucp_api_trail]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp process::/bin/controller type=api

[ucp_api_trail_by_username]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp process::/bin/controller type=api username=$username$

[ucp_users]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
description = List of UCP users
search = sourcetype=ucp process::/bin/controller type=api | dedup username | table username

[ucp_unauthorized_access]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp process::/bin/controller type=unauthorized 

[ucp_unauthorized_access_per_api_by_geo]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
display.general.type = visualizations
display.page.search.tab = visualizations
display.visualizations.type = mapping
search = sourcetype=ucp process::/bin/controller type=unauthorized  \
    |  rex field=remote_addr "(?<clientip>[^:]+):(?<clientport>\d+)" \
    | rename tags{} as tags | eval tags_cnt=mvcount(tags) | eval api=mvindex(tags,tags_cnt-1) \
    | iplocation prefix=iploc_ clientip \
    | geostats latfield=iploc_lat longfield=iploc_lon count by api

[ucp_container_logs]
action.email.useNSSubject = 1
alert.suppress = 0
alert.track = 0
auto_summarize.dispatch.earliest_time = -1d@h
cron_schedule = 0 0 * * *
search = sourcetype=ucp (NOT process::/bin/controller)
